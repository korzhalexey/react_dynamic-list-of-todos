{"version":3,"sources":["components/Todo/Todo.jsx","components/Form/Form.jsx","components/TodoList/TodoList.jsx","components/CurrentUser/CurrentUser.jsx","api.js","App.jsx","index.js"],"names":["Todo","completed","title","userId","selectedUserId","chooseUser","type","checked","readOnly","className","classnames","onClick","defaultProps","Form","query","setSearchQuery","todoStatus","setTodoStatus","action","placeholder","value","onChange","TodoList","todos","map","todo","key","id","PropTypes","arrayOf","shape","CurrentUser","name","email","phone","clearUserID","request","endpoint","fetch","then","response","json","getUserByID","userID","App","state","staticTodos","selectedUser","target","setState","sortTodo","todoUserId","user","data","filteredTodos","filter","this","filteredTodo","includes","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f49695e6.chunk.js","sourcesContent":["import React from 'react';\nimport classnames from 'classnames';\nimport PropTypes from 'prop-types';\n\nexport const Todo = ({\n  completed,\n  title,\n  userId,\n  selectedUserId,\n  chooseUser,\n}) => (\n  <>\n    <label>\n      <input\n        type=\"checkbox\"\n        checked={completed}\n        readOnly\n      />\n      <p>{title}</p>\n    </label>\n\n    <button\n      className={classnames(\n        'TodoList__user-button',\n        { 'TodoList__user-button--selected': userId === selectedUserId },\n        'button',\n      )}\n      type=\"button\"\n\n      onClick={() => {\n        chooseUser(userId);\n      }}\n    >\n      User&nbsp;#\n      {userId}\n    </button>\n  </>\n);\n\nTodo.defaultProps = {\n  completed: false,\n  title: '',\n  selectedUserId: 0,\n  userId: 0,\n};\n\nTodo.propTypes = {\n  completed: PropTypes.bool,\n  title: PropTypes.string,\n  selectedUserId: PropTypes.number,\n  userId: PropTypes.number,\n  chooseUser: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Form.scss';\n\nexport const Form = ({ query, setSearchQuery, todoStatus, setTodoStatus }) => (\n  <form action=\"post\">\n    <input\n      className=\"input-group-text\"\n      type=\"text\"\n      placeholder=\"Find todo\"\n      value={query}\n      onChange={setSearchQuery}\n    />\n\n    <select\n      className=\"input-group-text\"\n      value={todoStatus}\n      onChange={setTodoStatus}\n    >\n      <option value=\"all\">All</option>\n      <option value=\"active\">Active</option>\n      <option value=\"completed\">Completed</option>\n    </select>\n  </form>\n);\n\nForm.propTypes = {\n  query: PropTypes.string.isRequired,\n  setSearchQuery: PropTypes.func.isRequired,\n  todoStatus: PropTypes.string.isRequired,\n  setTodoStatus: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport './TodoList.scss';\nimport { Todo } from '../Todo/Todo';\nimport { Form } from '../Form/Form';\n\nexport const TodoList = (\n  {\n    todos,\n    chooseUser,\n    selectedUserId,\n    todoStatus,\n    setTodoStatus,\n    query,\n    setSearchQuery,\n  },\n) => (\n  <div className=\"TodoList\">\n    <h2>Todos:</h2>\n\n    <Form\n      query={query}\n      setSearchQuery={setSearchQuery}\n      todoStatus={todoStatus}\n      setTodoStatus={setTodoStatus}\n    />\n\n    <div className=\"TodoList__list-container\">\n      <ul className=\"TodoList__list\">\n        {\n          todos.map(todo => (\n            <li\n              key={todo.id}\n              className={classnames(\n                'TodoList__item',\n                {\n                  'TodoList__item--unchecked': !todo.completed,\n                  'TodoList__item--checked': todo.completed,\n                },\n              )}\n            >\n              <Todo\n                {...todo}\n                selectedUserId={selectedUserId}\n                chooseUser={chooseUser}\n              />\n            </li>\n          ))\n        }\n\n      </ul>\n    </div>\n  </div>\n);\n\nTodoList.defaultProps = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      completed: false,\n      title: '',\n      userId: 0,\n    }),\n  ),\n};\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      completed: PropTypes.bool,\n      createdAt: PropTypes.string.isRequired,\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string,\n      updatedAt: PropTypes.string.isRequired,\n      userId: PropTypes.number,\n    }).isRequired,\n  ),\n  chooseUser: PropTypes.func.isRequired,\n  selectedUserId: PropTypes.number.isRequired,\n  todoStatus: PropTypes.string.isRequired,\n  setTodoStatus: PropTypes.func.isRequired,\n  query: PropTypes.string.isRequired,\n  setSearchQuery: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './CurrentUser.scss';\nimport PropTypes from 'prop-types';\n\nexport const CurrentUser = ({ id, name, email, phone, clearUserID }) => (\n  <div className=\"CurrentUser\">\n    <h2 className=\"CurrentUser__title\">\n      <span>\n        Selected user:\n        { ' ' }\n        { id }\n      </span>\n    </h2>\n\n    <h3 className=\"CurrentUser__name\">{ name }</h3>\n    <p className=\"CurrentUser__email\">{ email }</p>\n    <p className=\"CurrentUser__phone\">{ phone }</p>\n\n    <button\n      className=\"CurrentUser__clear button\"\n      type=\"button\"\n      onClick={clearUserID}\n    >\n      Clear\n    </button>\n  </div>\n);\n\nCurrentUser.propTypes = {\n  id: PropTypes.number.isRequired,\n  name: PropTypes.string.isRequired,\n  email: PropTypes.string.isRequired,\n  phone: PropTypes.string.isRequired,\n  clearUserID: PropTypes.func.isRequired,\n};\n","const BASE_URL = `https://mate-api.herokuapp.com/`;\n\nexport const request = endpoint => fetch(`${BASE_URL}${endpoint}`)\n  .then(response => response.json());\n\nexport const getTodos = () => request('todos');\n\nexport const getUserByID = userID => request(`users/${userID}`);\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos, getUserByID } from './api';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    staticTodos: [],\n    selectedUserId: 0,\n    selectedUser: {},\n    todoStatus: '',\n    query: '',\n  };\n\n  componentDidMount() {\n    getTodos()\n      .then(response => (\n        this.setState({\n          todos: response.data,\n          staticTodos: response.data,\n        })\n      ));\n  }\n\n  setTodoStatus = ({ target }) => {\n    this.setState({\n      todoStatus: target.value,\n    });\n\n    this.sortTodo(target.value);\n  }\n\n  chooseUser = (todoUserId) => {\n    getUserByID(todoUserId).then((user) => {\n      this.setState(state => ({\n        selectedUserId: todoUserId,\n        selectedUser: user.data,\n      }));\n    });\n  }\n\n  setSearchQuery = ({ target }) => {\n    const { value } = target;\n\n    this.setState({\n      query: value,\n    });\n  };\n\n  clearUserID = () => {\n    this.setState({\n      selectedUserId: 0,\n    });\n  }\n\n  sortTodo = (value) => {\n    let filteredTodos;\n\n    switch (value) {\n      case 'completed':\n        filteredTodos = this.state.staticTodos.filter(todo => todo.completed);\n        break;\n      case 'active':\n        filteredTodos = this.state.staticTodos.filter(todo => !todo.completed);\n        break;\n      default:\n        filteredTodos = this.state.staticTodos;\n    }\n\n    this.setState({\n      todos: filteredTodos,\n    });\n  };\n\n  render() {\n    const\n      {\n        todos,\n        selectedUserId,\n        selectedUser,\n        todoStatus,\n        query,\n      }\n      = this.state;\n    const { setTodoStatus, chooseUser, setSearchQuery, clearUserID } = this;\n    const filteredTodo = todos\n      .filter(todo => todo.title\n        && todo.title.includes(query));\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={filteredTodo}\n            chooseUser={chooseUser}\n            selectedUserId={selectedUserId}\n            todoStatus={todoStatus}\n            setTodoStatus={setTodoStatus}\n            value={query}\n            setSearchQuery={setSearchQuery}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                {...selectedUser}\n                clearUserID={clearUserID}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}